# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python Tests & Linting

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 ./src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check code style with warnings only (don't fail the build)
        flake8 ./src --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics --per-file-ignores="__init__.py:F401"
        
    - name: Run unit tests
      run: |
        python -m unittest discover tests

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint black
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Check formatting with black
      run: |
        black --check --diff ./src
        
    - name: Analyze code with pylint
      run: |
        pylint --disable=all --enable=unused-import,unused-variable,unused-argument,redefined-outer-name ./src
